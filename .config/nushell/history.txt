lv ~/.config/nushell/config.nu
nvim ~/.config/nushell/config.nu
ls
cd ~/Dev/Rust/city_tiles/
ll
ls
alias ll = "ls -al"
ll
help alias
alias lv =   alias lv='$HOME/.local/bin/lvim'
alias lv=$HOME/.local/bin/lvim
alias lv = $HOME/.local/bin/lvim
lv
alias lv = `$HOME`/.local/bin/lvim
lv
alias lv = /home/lluz/.local/bin/lvim
lv
alias lv = '$HOME/.local/bin/lvim'
lv
alias lv = /home/lluz/.local/bin/lvim
lv
lg
which lg
sudo lg
~/.local/bin/lg
lg
c
alias c = clear
c
get alias
alias
show alias
help alias
lv ~/.config/nushell/config.nu
lv
alias lv = /home/lluz/.local/bin/lvim
lv ~/.config/nushell/config.nu
lv ~/.config/nushell/config.nu --save
alias lv = /home/lluz/.local/bin/lvim --save
lv
ls
ll
> export alias lv = /home/lluz/.local/bin/lvim
save alias lv = /home/lluz/.local/bin/lvim
config
config nu
ll
config nu
ll
config nu
ll
config nu
git-fetch
git fetch
config nu
ll
config nu
ll
alias lv = /home/lluz/.local/bin/lvim save
lv
config env 
config nu 
ls ~/.local/bin/
lvim
cd ~/.local/bin/
ls
ls -la
mv lvim lv
cd ~
lv
Dev/Rust/city_tiles/
cd Dev/Rust/city_tiles/
d .
ls | less
ls 
ls | where name == alsa
ls | where name = alsa
ls | where name == alsa.pc
ls | where name == alsa*
ls | where name == alsa[*]
ls | where name == alsa
ls | where name == alsa.pc
ls | regex alsa
ls | regex 'alsa'
ls | find 'alsa'
ls | find alsa
ls | find *.pc
ls | find [*].pc
ls | find .pc
ls | findq
c
cd ~/tmp/
c
clear
alias c = clear
gh repo view amtoine/wallpapers --json nameWithOwner | save foo.txt
gh repo view amtoine/wallpapers --json nameWithOwner
ll
ls
ls -la
bat foo.txt
rm foo.txt
c
config nu
$config 
$env
$alias
echo $env EDITOR
$env
echo $env config
echo $env get config
env
echo "def abc [] { 1+2 }" | save output.nu
source output.nu 
abc
echo "def abc [] { 1 + 2 }" | save output.nu
source output.nu 
abc
config nu
ll
config nu
ll
ls
c
config nu
up
config nu
up
config nu
nu
up
config nu
up
config nu
config nu u
config nu 
greet
config nu 
up
config nu 
c
ls | where type == dir
ls | where type == dir | sort-by modified
ls | where type == dir | sort-by name
ls | sort-by modified |  where type == dir
ls | sort-by modified --reverse |  where type == dir
ls | sort-by modified --reverse |  where type == dir | select name
ls | sort-by modified --reverse |  where type == dir | select name | first
ls | sort-by modified --reverse |  where type == dir | get name
ls | sort-by modified --reverse |  where type == dir | first 1 | get name
ls | sort-by modified --reverse |  where type == dir | first 1 | get name | cd
cd -
ls | sort-by modified --reverse |  where type == dir | first 1 | get name | cd name
let new_dir = (ls | sort-by modified --reverse |  where type == dir | first 1 | get name)
echo $new_dir
gitc https://github.com/nushell/nushell
ls
gitc a
cd target
cd ..
d target
config nu 
d
ll
ls
cd ~/tmp/
ll
ls
rm -rf nushell/
d
gitc https://github.com/nushell/nushell
echo $env.config
echo $env.config.nu
echo $env.config-nu
echo $env.nu-config
c
gitc   echo $new_dir
gitc https://github.com/nushell/nushell
cd ..
echo $env.config
echo $env.EDITOR
> env | each { |it| echo $"let-env ($it.name) = '($it.raw)'" } | str collect (char nl)
env | each { |it| echo $"let-env ($it.name) = '($it.raw)'" } | str collect (char nl)
login.nu
which nu
let nsd = (which nu | get path)
echo nsd
echo $nsd
let nsd = (which nu | get path | first 1)
echo $nsd
sudo chsh -s nsd
sudo chsh -s $nsd
bat /etc/shells
echo $nsd
let nsd = (which nu | get path | first 1)
sudo $nsd | save /etc/shells --append
$nsd | save /etc/shells --append
sudo lv 
sudoedit /etc/shells
chsh -s $nsd
alias
$env
sdn
ps
ps -aux
ps -a
ps -ux
ps -x
ps --help
ps | sort-by men
ps 
ps | sort-by mem
ps | sort-by mem | first 50
ps | sort-by mem --reverse | first 50
ls ~/.config/
cd ~/.config/helix/
ll
ls
bat config.toml
sdn
gitc https://github.com/godotengine/godot
scons -j15 target=release_debug module_mono_enabled=yes
sudo apt-get install build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev \
install build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev \
sudo apt-get install build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev \
inst build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev \
    libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm
inst build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev 
inst libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm
scons -j15 target=release_debug module_mono_enabled=yes
scons -j8 target=release_debug module_mono_enabled=yes
wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
sudo dpkg -i packages-microsoft-prod.deb
rm packages-microsoft-prod.debup
rm packages-microsoft-prod.deb
up
inst -y dotnet-sdk-6.0
inst -y dotnet-runtime-6.0
scons -j8 target=release_debug module_mono_enabled=yes
dotnet version
dotnet -v
dotnet --version
dotnet
dotnet --info
scons -j8 target=release_debug module_mono_enabled=yes
ls
lv SConstruct
ll platform/
ls platform/
sdr
sdsn
sdn
up
c
echo "deb [trusted=yes] https://apt.fury.io/notion-repackaged/ /" | sudo tee /etc/apt/sources.list.d/notion-repackaged.list
up
inst notion-app-enhanced
notion-app-enhanced 
csdn
sdn
c
lg 
sdn
up
c
lg src/grid/
sdn
lg src/grid/
lg src/grid/group_cells.rs
lg src/grid/group_cells.rs & exit
helix
cargo install helix-term
inst helix
inst helix-term
cd ~/tmp/
ll
ls
cd ~
ls
cd helix/
ll
ls
config nu 
cd ~/helix/
ls
cargo build --release
which lg
cargo install --path helix-term/
cd ..
helix
ll
ls ~/.cargo/bin/
cd ~/helix/target/
ll
cd release/
ll
ls
hx
cd ..
hx
cd ~
hx
hx src/grid/group_cells.rs
lg src/grid/group_cells.rs &
lg src/grid/group_cells.rs
c;cargo run --release --features bevy/dynamic
lg src/grid/group_cells.rs
c
cargo add rand
c;cargo run --release --features bevy/dynamic
lg src/grid/group_cells.rs
c;cargo run --release --features bevy/dynamic
sdn
nvidia-settings 
sudo nvidia-settings 
nvidia-settings 
bash
nvidia-settings 
nu
lv
d ~/Dev/
cd ~/Dev
ll
ls
cd RustDev
ll /mnt/
ll /mnt/Backup/
ls /mnt/Backup/
cd /mnt/Backup/
cd Dev
nvim ~/.config/fish/config.fish
vim ~/.config/fish/config.fish
vi ~/.config/fish/config.fish
sdr
sudoedit /etc/X11/xorg.conf
sudo nvidia-settings 
c
sdn
cd ~/
pwd
ls /etc/X11/xorg.conf
ll /etc/X11/xorg.conf
sudo chown lluz /etc/X11/xorg.conf
ll /etc/X11/xorg.conf
sudo nvidia-settings 
sudo chmod u+x /usr/share/screen-resolution-extra/nvidia-polkit
ll /usr/share/screen-resolution-extra/nvidia-polkit
lv ~/.config/fish/config.fish
xrand
xrandr 
lv ~/.config/i3/config
lv /etc/X11/xorg.conf
lg src/grid/group_cells.rs
c
c;cargo run --release --features bevy/dynamic
lg src/grid/group_cells.rs & _
which lg
which lg | get 0
which lg | get path
which lg | get path | first 1
let a = (which lg | get path | first 1)
a
echo a
let aaa = (which lg | get path | first 1)
aaa
let nsd = (which nu | get path | first 1)
nsd
$a
cd $a
ll $a
lv ~/.config/fish/config.fish
cd ~/.config/
cd ..
cp -rf .config/ linux_custom/.config/
cp -r .config/ linux_custom/.config/
cd linux_custom/
ll
cd .config/
ll
ls .config/
ll
mv -rf .config/ .
mv -r .config/ .
mv .config/ .
mv --help
mv --force .config/ .
cd ..
cp -R .config/ linux_custom/
cp --help
cp -r .config/ linux_custom/
cd linux_custom/
ll
cd .config/
ll
rm -rf .config/
ll
rm -rf yarn/ transmission/ update-notifier/ user-dirs.* jgit/config JetBrains/ 
ll
rm -rf eog/ envman/ dconf/ configstore/ cef_user_data/ `Unreal Engine/` QtProject.conf NuGet/ Epic/ Code/ gtk-* godot/ goa-1.0/ gedit/ evolution/ enchant/ envman/ vivaldi/ totem/ ranger/ pulse/ pavucontrol.ini mimeapps.list libreoffice/ 
ll
rm -rf gh/ btop/ nautilus/ gnome-* .gsd-keyboard.settings-ported 
ll
rm nvim/
ll
rm -rf notion-app-enhanced/
rm -rf jgit/
ll ibus/
ll ibus/*
rm -rf ibus/
ll
c;ll
hx src/grid/group_cells.rs
gaa
cd helix/
ll
cd runtime/
ll
dust . -2
dust . -d 2
dust . -d 2 -a
cd ../
ll
dust runtime/ -d 3
sudo dust runtime/ -d 3
which sudo
which dust
let dustv = (which dust | get path | first 1)
ll $dustv
chmod u+x $dustv
sudo dust runtime/ -d 3
sudo -E env "PATH=$PATH" dust runtime/ -d 3
sudo -E dust runtime/ -d 3
sudo $dustv runtime/ -d 3
cd ..
rm helix/
rm -rf helix/
ll
gaa
gcm "update configs"
git status 
gp
dust .
lv ~/.config/fish/config.fish
cd ~
ll
ls
ls -a
ls
ls Dev/
ls ~
ls Downloads/
cd Downloads/
rm *.zip
ls
rm *.gz
ls
ls | sort-by type
ls zls/
cd ~
ls -a
ls -a | sort-by dir
ls -a | sort-by type
cd .config/
ll -a
ld
lsd
lld
lad
config nu 
lsd 
lsd ~
config nu 
lsd ~
ls
ls ~
cd ~
lsd
lsd .
config nu 
lsd
config nu 
lsd 
lsd ~
cd ~
ll
ls
d ~/.config/
d
lv ~/.config/fish/config.fish
config nu 
echo $PWD
env
echo $PWD
$PWD
echo $USER
$env.PWD
config nu 
d ~
config nu 
cd ~
cd ~ | get 
echo $env.PWD
cd .config | echo o $env.PWD
cd .config | echo o $env.PWD | get o | first 1
cd .. | echo o $env.PWD | get o | first 1
cd .. | echo o $env.PWD | first 1
cd .config | echo o $env.PWD | first 1
cd lluz | echo o $env.PWD | first 1
cd lluz | echo o $env.PWD 
cd .config | echo o $env.PWD 
cd ~
lsd .config/
cd pulse | echo o $env.PWD | get o
cd .. | echo $env.PWD 
cd ~
d .config/
d ..
let-env PWDS = "test"
$env.PWDS
d ..
config env 
d .config/
$env.PWDS
config env 
cd ~
config nu 
cd ~
d ..
c
d ~
cd ~
touch test.txt
lv test.txt
open test.txt
d ~
lv test.txt
open test.txt
open test.txt | bbbb | save test.txt
open test.txt | echo bbbb | save test.txt
open test.txt
d ~
touch .pwds
d .config/
d ~
bat .pwds
d .config/g
d .config/
cd ~
d ~
sdn
d .config/
$env.HOME
echo "$env.HOME/"
echo "$env.HOME/.pwds"
open "$env.HOME/.pwds"
open $env.HOME/.pwds
d ~
cp -r .config/nushell/ linux_custom/.config/
ll linux_custom/.config/
lsd linux_custom/.config/
cd linux_custom/.config/
ll
ll nushell/
cd ../..
cd linux_custom/
gaa
gcm "update nushell functions"
gp
config nu 
d ~/RustDev/city_tiles/
c
lg 
snap
snap list
sudo snap remove zig
ps 
sudo snap remove firefox
ps aux
ps --help
ps --long
c
ps --help
inst firefox
ps | where status = 'Running'
ps | where status =~ 'Running'
ps | where status =~ 'Sleeping'
ps | where status =~ 'Sleeping' | sort-by mem
ps | where status =~ 'Sleeping' | sort-by cpu
ps | where status =~ 'Sleeping' | sort-by cpu reverse | first 10
ps | where status =~ 'Sleeping' | sort-by cpu --reverse | first 10
ps | where status =~ 'Sleeping' | sort-by cpu | first 10
ps | where status =~ 'Sleeping' | sort-by cpu | first 100
ps -l | where status =~ 'Sleeping' | sort-by cpu | first 100
ps -l | where status =~ 'Sleeping' | sort-by cpu
ps -l | where status =~ 'Sleeping' | sort-by mem --reverse
ps -l | where status =~ 'Sleeping' | sort-by mem --reverse | first 100
ps | where status =~ 'Sleeping' | sort-by mem --reverse | first 100
ps | where status =~ 'Sleeping' | sort-by mem --reverse | first 100 | where name =~ 'lunnar'
ps | where status =~ 'Sleeping' | sort-by mem --reverse | first 100 | where name =~ 'nvim'
lg
c
cd ~/DevTools/nvim-linux64/
ll
ls -a
lds
lsd
ll bin/
./bin/nvim
bat ~/.local/bin/lg
bat ~/Downloads/fast-shutdown.txt
lv ~/Downloads/fast-shutdown.txt
lv 
lv .
lv
lv a
lg src/grid/group_cells.rs & _
lg src/grid/group_cells.rs
lg
lg src/grid/group_cells.rs & disown
execvp 
nohup obs
nohup obs &
obs &; disown
lg src/grid/group_cells.rs
c;cargo run --release --features bevy/dynamic
c
ls ~/.config/
lsd ~/.config/
which neovide
lg src/grid/group_cells.rs
neovide
c
snap list
snap list parse
snap list | parse
snap list | parser
snap list | parse
snap list | parse {a:a}
snap list | parse {Name:a}
snap list | lines | parse "{Name}" 
snap list | lines | parse "{Name} = {Versão} {Rev} {A seguir} {Editor} {Notas}" 
snap list | lines | parse "{Name} = {Versão} {Rev} {\"A seguir\"} {Editor} {Notas}" 
snap list | lines | parse "{Name} = {Versão} {Rev} {seguir} {Editor} {Notas}" 
snap list | lines | parse "{Name} = {Versão} {Rev}" 
snap list | lines | parse "{Name} = #{Versão} #{Rev}" 
snap list | lines | parse "{Name} = #{Versão} #{Rev}" | str trim
snap list | lines | parse "{Name} #{Versão} #{Rev}"
snap list | lines | parse "{Name} {Versão} {Rev}"
snap list | lines | parse "{Nome} {Versão} {Rev}"
snap list | lines | parse "{Nome} #{Versão} {Rev}"
snap list | lines | parse "{Nome} {Versão} {Rev}"
snap list | lines | parse "{Nome} = {Versão} {Rev}"
snap list | lines | parse "{Nome} = {Versão} "
snap list | lines | parse "{Nome} "
snap list | lines | parse "{Nome}"
snap list | lines | parse "{Nome} = {v} #{d}"
> cargo search shells --limit 10 | lines | parse "{crate_name} = {version} #{description}" | str trim
cargo search shells --limit 10 | lines | parse "{crate_name} = {version} #{description}" | str trim
cargo search shells --limit 10 | str trim
snap list | lines | parse "{Nome} \t {a}"
snap list | lines | parse "{Nome}  {a}"
snap list | lines | parse "{Nome} {Versão}"
snap list | lines | parse "{Nome} {Versão} {Rev}"
snap list | lines | parse "{Nome}     {Versão} {Rev}"
snap list | lines | parse "{Nome}        {Versão} {Rev}"
snap list | lines | parse "{Nome}          {Versão} {Rev}"
$df
df
df | sum
git log
git log --pretty="%h"
> git log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 5
git log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 5
> git log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 5 | lines | split column "»¦«"
 git log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 5 | lines | split column "»¦«"
snap list | lines | split column "\t"
snap list | lines | split column ""
snap list | lines | split column " "
snap list | lines | split column "\t"
gitc https://github.com/iced-rs/iced
cargo run --example todos
ll
lsd
config nu 
lad 
config nu 
lad 
cd ~/tmp/iced/
lad
lsd
ls -alh
ls -ald
ls -al
ls -d
ls 
ls -h
ls -D
config nu 
ls -d
cd examples/
ls
ls -d
cd 
d -
lsd
let ls = (ls -d)
ls
let ls = (ls -d --reverse)
let ls = (ls -d | --reverse)
let ls = (ls -d | reverse)
ls
bat config nu
config nu
let ls = (ls -d | sort-by type)
ls
let ls = (ls -d | sort-by type | reverse)
ls
$ls
let ls = (ls -d | sort-by type)
$ls
def ls [ arg=""] {<\n>ls -d $arg<\n>}
ls -d
echo ls
bat ls
which ls
def ls [ arg=""] {<\n>ls -a $arg<\n>}
def ls [ arg=""] {<\n>ls $arg<\n>}
ll
cd todos/
lg styling/src/main.rs
ps | where name =~ "iced"
time | ps | where name =~ "iced"
time  ps | where name =~ "iced"
ps | where name =~ "iced"
cargo run
df
df -h
up -y
up
config nu
sudo settings
gnome-session-properties 
update-manager 
sudoedit /etc/apt/sources.list
ls /etc/apt/sources.list.d/
cd /etc/apt/sources.list.d/
ll
ls
bat notion-repackaged.list
remove notion-repackaged
sudo apt remove notion-repackaged
sudo apt remove notion-app-enhanced 
ls
rm notion-repackaged.list
sudo rm notion-repackaged.list
ls
c;cargo run --release --features bevy/dynamic
d ~/RustDev/city_tiles/
c;cargo run --release --features bevy/dynamic
sdn
sudoedit /etc/X11/xorg.conf
bat /etc/X11/xorg.conf
cd /etc/X11/xorg.conf.d/
ll
ls
ls -a
bash
cd ..
ll
ls
lsd
sdr
sudoedit /etc/X11/xorg.conf
lg src/grid/group_cells.rs
c;cargo run --release --features bevy/dynamic
cargo add concat_arrays
c;cargo run --release --features bevy/dynamic
lg src/grid/group_cells.rs
c;cargo run --release --features bevy/dynamic
cargo add tinny-vec
cargo add tinny_vec
cargo add tiny_vec
cargo add tinyvec
cargo add tinyvec --features rustc_1_57
cargo add tinyvec --features tinyvec_macros
c;cargo run --release --features bevy/dynamic
git add -p
gcm "replace SmallVec with TinyVec"
gp
lg src/grid/group_cells.rs
c;cargo run --release --features bevy/dynamic
sdn
lg src/grid/group_cells.rs
c
c;cargo run --release --features bevy/dynamic
hx src/grid/group_cells.rs
lg src/grid/group_cells.rs
c
cd ~/.config/
mk nvim nvim.bak
mv nvim nvim.bak
cd ~/.local/share/nvim
mv site/ site.bak
cd 
cd DevTools/
git clone https://github.com/AstroNvim/AstroNvim ~/.config/nvim
nvim +PackerSync
nvim
v src/grid/group_cells.rs
c;cargo run --release --features bevy/dynamic
rm ll nohup.out
git status 
gcm "add copy to RoadDirection and remove unecessary clones"
gp
cd ~/.config/nvim/
ll
ls
lsd
bat init.lua
cd lua/
lsd
cd configs/
lsd
lsd lsp/
cd lsp/
bat init.lua
lsd
cd server-settings/
lsd
bat rust_analyzer.lua
cd ../..
lsd
mkdir user
cp init.lua user/
cd user/
v init.lua
cd ..
v init.lua
v
cd lua/
bat user_example/init.lua
lsd ..
lsd ../user/
cp user_example/init.lua ../user/
cd ../user/
v init.lua
ll
lsd
v ../init.lua
v init.lua
v src/grid/group_cells.rs
v -- headless -c 'autocmd User PackerComplete quitall' -c 'PackerSunc'
nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSunc'
nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
cargo clean
rm -rf target/
v src/grid/group_cells.rs
sudo rm -rf target/
ll
cargo clean
c;cargo run --release --features bevy/dynamic
cd ~/.config/nvim/user/
lsd
v init.lua
v ../lua/user_example/init.lua
v src/grid/group_cells.rs
nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v src/grid/group_cells.rs
v init.lua
nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v init.lua
v src/grid/group_cells.rs
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v init.lua
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v src/grid/group_cells.rs
cd ..
lsd
mv -f user/ lua/
mv -r user/ lua/
mv user/ lua/
lsd
cd lua/
ls
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
cd user/
v init.lua
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v src/grid/group_cells.rs
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v src/grid/group_cells.rs
neovide 
neovide src/grid/group_cells.rs
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
neovide src/grid/group_cells.rs
v init.lua
d
d ~
d -
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
neovide src/grid/group_cells.rs
cd ~/RustDev/city_tiles/
neovide src/grid/group_cells.rs
cd ../../
cd ../
cp nvim.bak ../linux_custom/.config/
cp -r nvim.bak ../linux_custom/.config/
cp -r nvim ../linux_custom/.config/
cd ~/linux_custom/.config/
lsd
git status
gaa
rm nvim/.git/
rm -rf nvim/.git/
gaa
gcm "use AstronVim as Nvim flavor"
gp
which neovide
which neovide | bat 
which neovide | get path | first 1
let a = (which neovide | get path | first 1)
bat $a
which lg | get path | first 1
let b = (which lg | get path | first 1)
bat $b
cd ~/.local/bin/
nv a.txt
chmod u+x ~/.local/bin/nv
nv a.txt
v nv
d ~/RustDev/city_tiles/
nv src/grid/group_cells.rs
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
nv src/grid/group_cells.rs
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v src/grid/group_cells.rs
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
sdn
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v src/grid/group_cells.rs
cd ~/tmp/
cargo new testes
cd testes/
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v src/main.rs
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v src/main.rs
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v src/main.rs
sdn
v ~/tmp/testes/
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v src/main.rs
cd ~/.config/nvim/user/
cd ~/.config/nvim/lua/user/
v .
cd ../..
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
cd ~/.config/nvim/
v
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v .
d ~/.config/nvim/lua/user/
v
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v init.lua
sdn
up
sdn
cd ~/tmp/testes/
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v src/main.rs
cd ~/RustDev/city_tiles/
c
d ~/RustDev/city_tiles/
c
c;cargo run --release --features bevy/dynamic
v src/grid/group_cells.rs
cargo add once_cell
c;cargo run --release --features bevy/dynamic
v +PackerSync
v src/grid/group_cells.rs
v +PackerSync
v src/grid/group_cells.rs
v +PackerSync
v src/grid/group_cells.rs
v +PackerSync
v src/grid/group_cells.rs
sdn
cd ~/tmp/godot/
git fetch
gpl
scons -j15 target=release_debug module_mono_enabled=yes
cd ..
rm -rf godot/
dust . -d 2
up
cd ~/tmp/bevy-hikari/
git fetch ;; git pull
cargo run --release  --features bevy/dynamic --example minimal
git checkout bevy-0.8
sdn
up
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo apt install ./google-chrome-stable_current_amd64.deb
c
gitc https://github.com/Weibye/bevy-prot-widgets
cargo run --release  --features bevy/dynamic --example material-font
cargo run --release  --features bevy/dynamic --example button
cargo run --release  --features bevy/dynamic --example widgets
cd ..
rm -rf bevy-prot-widgets/
sdn
c
v src/grid/group_cells.rs
snd
sdn
v ~/.config/i3/config
sdn
cd ~/tmp/bevy-hikari/
git fetch ;; git pull
cargo run --release  --features bevy/dynamic --example minimal
v examples/minimal.rs
up
sdn
up
sdn
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v src/grid/group_cells.rs
v ~/.config/nvim/lua/user/init.lua
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v src/grid/group_cells.rs
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
v ~/.config/nvim/lua/user/init.lua
killall picom
picom &
picom 
killall picom
picom 
killall picom
picom 
xprop 
picom &
picom 
v ~/.config/fish/config.fish
nvim  --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
d ~/tmp/penrose/
cargo run --release --example p 
ll examples/
ls examples/
cargo run --release --example simple_config_with_hooks
cargo
fish
cargo run --release --example simple_config_with_hooks
fish
startx ~/tmp/mwm/target/release/mwm
i3
sdr
sdb
